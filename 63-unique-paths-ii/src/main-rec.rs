pub struct Solution {}

use std::collections::HashMap;

impl Solution {
    pub fn unique_paths_with_obstacles(obstacle_grid: Vec<Vec<i32>>) -> i32 {
        walk_path(&obstacle_grid, &mut HashMap::new(), (0, 0))         
    }
}

pub fn walk_path(grid: &Vec<Vec<i32>>, map: &mut HashMap<(usize, usize), i32>,
                 (x, y): (usize, usize)) -> i32 {
    let (m, n) = (grid.len(), grid[0].len());

    if grid[x][y] == 1 || grid[m - 1][n - 1] == 1 {
        //unreachable
        return 0;
    }

    if x == m - 1 && y == n - 1{
        //finish the path
        return 1;
    }

    if let Some(&v) = map.get(&(x, y)) {
        return v;
    }
    
    let mut sum = 0;

    if x < m - 1  && grid[x + 1][y] != 1 {
        sum += walk_path(grid, map, (x + 1, y));
    }

    if y < n - 1 && grid[x][y + 1] != 1 {
        sum += walk_path(grid, map, (x, y + 1));
    }

    map.insert((x, y), sum);

    sum
}

use std::time:: SystemTime;

fn main() {
    let start = SystemTime::now();
    
    assert_eq!(28, Solution::unique_paths_with_obstacles(vec![vec![0; 7]; 3]));
    assert_eq!(6, Solution::unique_paths_with_obstacles(vec![vec![0; 3]; 3]));
    assert_eq!(1, Solution::unique_paths_with_obstacles(vec![vec![0; 1]; 3]));
    assert_eq!(1, Solution::unique_paths_with_obstacles(vec![vec![0; 1]; 1]));

    assert_eq!(2, Solution::unique_paths_with_obstacles(vec![vec![0, 0, 0],
                                                             vec![0, 1, 0],
                                                             vec![0, 0, 0]]));


    assert_eq!(1, Solution::unique_paths_with_obstacles(vec![vec![0, 1], vec![0, 0]]));
    assert_eq!(0, Solution::unique_paths_with_obstacles(vec![vec![1]]));
    assert_eq!(718991952, Solution::unique_paths_with_obstacles(vec![vec![0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,0,0,0,1,0,0],
                                                                vec![0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
                                                                vec![1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,0,1,0,0,0],
                                                                vec![1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,1],
                                                                vec![0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
                                                                vec![0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,1,0,0,1,0,0],
                                                                vec![0,0,0,0,0,0,1,0,0,0,1,1,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0],
                                                                vec![1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,1,0,0,0,1],
                                                                vec![0,0,0,0,1,0,0,1,0,1,1,1,0,0,0,1,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0],
                                                                vec![0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0],
                                                                vec![1,0,1,0,1,1,0,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0],
                                                                vec![0,0,0,0,0,0,1,0,0,1,1,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,1,0,0,0,1],
                                                                vec![0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0],
                                                                vec![1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                                vec![0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0],
                                                                vec![0,1,0,0,1,0,0,0,0,0,1,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0],
                                                                vec![0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0],
                                                                vec![0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0],
                                                                vec![0,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                                vec![0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0],
                                                                vec![0,0,0,1,0,1,0,0,1,0,0,0,0,0,1,1,1,0,1,1,1,0,0,1,0,1,0,1,1,1,0,0,0,0,0,0],
                                                                vec![0,0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
                                                                vec![0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0],
                                                                vec![0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
                                                                vec![1,1,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0],
                                                                vec![0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0],
                                                                vec![0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,1,1,1,0,0,0,0,0,0,1,0,0,0,1,1,0,0],
                                                                vec![0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0]]));



    println!("Time elapsed:{} us", SystemTime::now().duration_since(start).unwrap().as_micros());
}
