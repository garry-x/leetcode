pub struct Solution {}

/**
The set [1, 2, 3, ..., n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for n = 3:

"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.

Example 1:

Input: n = 3, k = 3
Output: "213"
Example 2:

Input: n = 4, k = 9
Output: "2314"
Example 3:

Input: n = 3, k = 1
Output: "123"

Constraints:

1 <= n <= 9
1 <= k <= n!
*/

impl Solution {
    pub fn get_permutation(n: i32, k: i32) -> String {
        kth_perm(n as usize, &mut Vec::new(), &mut vec![true; n as usize],
                 k as usize, &mut 0).unwrap()
    }
}

pub fn kth_perm(n: usize, buf: &mut Vec<char>,
                mark: &mut Vec<bool>,
                k: usize, count: &mut usize) -> Option<String> {
    if buf.len() == n {
        *count += 1;

        if *count == k {
            return Some(buf.iter().collect());
        } else {
            return None;
        }
    }

    for i in 0..n {
        if !mark[i] {
            continue;
        }

        mark[i] = false;
        buf.push(std::char::from_digit(i as u32 + 1, 10).unwrap());
        if let Some(s) = kth_perm(n, buf, mark, k, count) {
            return Some(s);
        }
        buf.pop();
        mark[i] = true;    
    }

    None
}

use std::time:: SystemTime;

fn main() {
    let start = SystemTime::now();
  
    println!("{:?}", Solution::get_permutation(1, 1));

    for i in 1..7 {
        println!("{:?}", Solution::get_permutation(3, i));
    }

    println!("Time elapsed:{} us", SystemTime::now().duration_since(start).unwrap().as_micros());
}
